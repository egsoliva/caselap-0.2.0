stages:
  - build
  - deploy

variables:
  BATCH_BUILD: "1"
  V: "0"
  MAKEFLAGS: "-j8 --no-keep-going"
  IDF_CI_BUILD: "1"

before_script:
  # add gitlab ssh key
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - echo -n $GITLAB_KEY > ~/.ssh/id_rsa_base64
  - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - echo -e "Host gitlab.espressif.cn\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

.build_all_examples_script: &build_all_examples_script
  - for EXAMPLE in $EXAMPLES; do
  - cd $CI_PROJECT_DIR/examples/$EXAMPLE
  - echo Building $EXAMPLE
  - if [[ "$EXAMPLE" == "solution" ]]; then
  - for TARGET in $TARGETS; do
  - cd $CI_PROJECT_DIR/examples/$EXAMPLE
  - idf.py fullclean
  - idf.py set-target $TARGET
  - idf.py build
  - done
  - else
  - idf.py fullclean
  - idf.py build
  - fi
  - echo Build Complete for $EXAMPLE
  - done

.build_template:
  stage: build
  tags:
    - build
  variables:
    EXAMPLES: "coin_cell_demo/bulb coin_cell_demo/switch control get-started ota provisioning security solution wireless_debug"
  script:
    - *build_all_examples_script

build_docs:
    stage: build
    image: $CI_DOCKER_REGISTRY/esp-idf-doc-env-v5.3:1-1
    variables:
        ESP_DOCS_LATEST_BRANCH_NAME: "master"
    artifacts:
        when: always
        paths:
            - docs/_build/*/*/*.txt
            - docs/_build/*/*/html/*
        expire_in: 1 days
    script:
        - cd docs
        - build-docs -t esp32 esp32s2 esp32s3 esp32c2 esp32c3 esp32c6 -l en

.deploy_docs_template:
    stage: build
    image: $CI_DOCKER_REGISTRY/esp-idf-doc-env-v5.3:1-1
    needs:
        - build_docs
    variables:
        ESP_DOCS_LATEST_BRANCH_NAME: "master"
    script:
        - source ${CI_PROJECT_DIR}/docs/utils.sh
        - add_doc_server_ssh_keys $DOCS_DEPLOY_PRIVATEKEY $DOCS_DEPLOY_SERVER $DOCS_DEPLOY_SERVER_USER
        - export GIT_VER=$(git describe --always)
        - deploy-docs
    tags:
        - deploy_docs

deploy_docs_preview:
    extends:
        - .deploy_docs_template
    variables:
        TYPE: "preview"
        DOCS_BUILD_DIR: "${CI_PROJECT_DIR}/docs/_build/"
        DOCS_DEPLOY_PRIVATEKEY: "$DOCS_PREVIEW_PRIVATEKEY"
        DOCS_DEPLOY_SERVER: "$DOCS_PREVIEW_SERVER"
        DOCS_DEPLOY_SERVER_USER: "$DOCS_PREVIEW_SERVER_USER"
        DOCS_DEPLOY_PATH: "$DOCS_PREVIEW_PATH"
        DOCS_DEPLOY_URL_BASE: "https://$DOCS_PREVIEW_SERVER/projects/esp-now"

deploy_docs_production:
    only:
        - master
        - /^release\/v/
        - /^v\d+\.\d+/
    extends:
        - .deploy_docs_template
    variables:
        TYPE: "production"
        DOCS_BUILD_DIR: "${CI_PROJECT_DIR}/docs/_build/"
        DOCS_DEPLOY_PRIVATEKEY: "$DOCS_PROD_PRIVATEKEY"
        DOCS_DEPLOY_SERVER: "$DOCS_PROD_SERVER"
        DOCS_DEPLOY_SERVER_USER: "$DOCS_PROD_SERVER_USER"
        DOCS_DEPLOY_PATH: "$DOCS_PROD_PATH"
        DOCS_DEPLOY_URL_BASE: "https://$DOCS_PROD_SERVER/projects/esp-now"

build_idf_v4.4:
  extends: .build_template
  image: espressif/idf:release-v4.4
  variables:
    TARGETS: "esp32 esp32s2 esp32s3 esp32c3"

build_idf_v5.0:
  extends: .build_template
  image: espressif/idf:release-v5.0
  variables:
    TARGETS: "esp32 esp32s2 esp32s3 esp32c2 esp32c3"

build_idf_v5.1:
  extends: .build_template
  image: espressif/idf:release-v5.1
  variables:
    TARGETS: "esp32 esp32s2 esp32s3 esp32c2 esp32c3 esp32c6"

build_idf_v5.2:
  extends: .build_template
  image: espressif/idf:release-v5.2
  variables:
    TARGETS: "esp32 esp32s2 esp32s3 esp32c2 esp32c3 esp32c6"

build_idf_v5.3:
  extends: .build_template
  image: espressif/idf:release-v5.3
  variables:
    TARGETS: "esp32 esp32s2 esp32s3 esp32c2 esp32c3 esp32c6"

# build_idf_master:
#   extends: .build_template
#   image: espressif/idf:latest
#   variables:
#     TARGETS: "esp32 esp32s2 esp32s3 esp32c2 esp32c3 esp32c6"

push_master_to_github:
  stage: deploy
  only:
    - master
    - /^release\/v/
#  when: on_success
  image: $CI_DOCKER_REGISTRY/esp32-ci-env
  variables:
    GIT_STRATEGY: clone
    GITHUB_PUSH_REFS: refs/remotes/origin/release refs/remotes/origin/master
  before_script:
    - echo "skip default before_script"
  script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GH_PUSH_KEY >> ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
    - git remote add github git@github.com:espressif/esp-now.git
    # What the next line of script does: goes through the list of refs for all branches we push to github,
    # generates a snippet of shell which is evaluated. The snippet checks CI_BUILD_REF against the SHA
    # (aka objectname) at tip of each branch, and if any SHAs match then it checks out the local branch
    # and then pushes that ref to a corresponding github branch
    #
    # NB: In gitlab 9.x, CI_BUILD_REF was deprecated. New name is CI_COMMIT_REF. If below command suddenly
    # generates bash syntax errors, this is probably why.
    - eval $(git for-each-ref --shell bash --format 'if [ $CI_COMMIT_SHA == %(objectname) ]; then git checkout -B %(refname:strip=3); git push --follow-tags github %(refname:strip=3); fi;' $GITHUB_PUSH_REFS)
